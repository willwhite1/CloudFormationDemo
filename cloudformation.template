{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "This template deploys WillsDemo VPC & server stack",

  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

	"RdpLocation" : {
      "Description" : "Lockdown RDP access to the bastion host (default can be accessed from anywhere)",
      "Type" : "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },

    "PublicWebInstanceType" : {
      "Description" : "Amazon EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

	"PrivateWebInstanceType" : {
      "Description" : "Amazon EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

	"AppInstanceType" : {
      "Description" : "Amazon EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

	"DbInstanceType" : {
      "Description" : "Amazon EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    }
  },

  "Mappings" : {
    "SubnetConfig" : {
      "VPC"     : { "CIDR" : "10.0.0.0/16" },
	  "PublicWebLayer"  : { "CIDR" : "10.0.0.0/24" },
	  "PrivateWebLayer"  : { "CIDR" : "10.0.1.0/24" },
	  "AppLayer"     : { "CIDR" : "10.0.2.0/24" },
      "DbLayer"     : { "CIDR" : "10.0.3.0/24" }
    },
    "AWSRegion2AMI" : {
      "us-east-1"        : {"Windows2008r2" : "ami-7d7f026a", "Windows2012r2" : "ami-ee7805f9"},
	  "us-east-2"        : {"Windows2008r2" : "ami-7d7f026a", "Windows2012r2" : "ami-de164cbb", "2016withSqlExpress" : "ami-9c3e64f9", "Windows2016Full" : "ami-e03b6185"},
      "us-west-2"        : {"Windows2008r2" : "ami-8505d7e5", "Windows2012r2" : "ami-2827f548"},
      "us-west-1"        : {"Windows2008r2" : "ami-576c2337", "Windows2012r2" : "ami-c06b24a0"},
      "eu-west-1"        : {"Windows2008r2" : "ami-ea84fd99", "Windows2012r2" : "ami-9b81f8e8"},
      "eu-central-1"     : {"Windows2008r2" : "ami-a947b5c6", "Windows2012r2" : "ami-7248ba1d"},
      "ap-northeast-1"   : {"Windows2008r2" : "ami-1efc2d7f", "Windows2012r2" : "ami-fffd2c9e"},
      "ap-northeast-2"   : {"Windows2008r2" : "ami-3323f65d", "Windows2012r2" : "ami-ee20f580"},
      "ap-southeast-1"   : {"Windows2008r2" : "ami-be5389dd", "Windows2012r2" : "ami-ac5389cf"},
      "ap-southeast-2"   : {"Windows2008r2" : "ami-2a9eaf49", "Windows2012r2" : "ami-899eafea"},
      "ap-south-1"       : {"Windows2008r2" : "ami-43fd882c", "Windows2012r2" : "ami-75fe8b1a"},
      "sa-east-1"        : {"Windows2008r2" : "ami-a02bbbcc", "Windows2012r2" : "ami-8e2fbfe2"},
      "cn-north-1"       : {"Windows2008r2" : "ami-ca68bda7", "Windows2012r2" : "ami-246cb949"}
    }
  },

  "Resources" : {

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "VPC" }
        ]
      }
    },

	"PublicWebSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "PublicWebLayer", "CIDR" ]},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "PublicWebLayer" }
        ]
      }
    },

	"PrivateWebSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "PrivateWebLayer", "CIDR" ]},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "PrivateWebLayer" }
        ]
      }
    },

	"AppSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "AppLayer", "CIDR" ]},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "AppLayer" }
        ]
      }
    },

	"DbSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "DbLayer", "CIDR" ]},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "DbLayer" }
        ]
      }
    },

	"InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "PublicWeb" }
        ]
      }
    },

	"GatewayToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

	"RouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Internet" }
        ]
      }
    },

	"PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

	"PublicWebSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicWebSubnet" },
        "RouteTableId" : { "Ref" : "RouteTable" }
      }
    },

	"PrivateWebSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateWebSubnet" },
        "RouteTableId" : { "Ref" : "RouteTable" }
      }
    },

	"AppSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "AppSubnet" },
        "RouteTableId" : { "Ref" : "RouteTable" }
      }
    },

	"DbSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "DbSubnet" },
        "RouteTableId" : { "Ref" : "RouteTable" }
      }
    },

	"PublicNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "PublicWeb" }
        ]
      }
    },

	"PrivateWebNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "PrivateWeb" }
        ]
      }
    },

	"AppNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "AppLayer" }
        ]
      }
    },

	"DbNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "DbLayer" }
        ]
      }
    },

	"InboundSQLDbNetworkAclEntryFromAppLayer" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "DbNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "AppLayer", "CIDR" ]},
        "PortRange" : { "From" : "1433", "To" : "1433" }
      }
    },

	"InboundMQAppNetworkAclEntryFromPublicWebLayer" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "AppNetworkAcl" },
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "PublicWebLayer", "CIDR" ]},
        "PortRange" : { "From" : "5672", "To" : "5672" }
      }
    },

	"InboundMQAppNetworkAclEntryFromPrivateWebLayer" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "AppNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "PrivateWebLayer", "CIDR" ]},
        "PortRange" : { "From" : "5672", "To" : "5672" }
      }
    },

	"InboundHTTPPrivateWebNetworkAclEntryFromPublicWebLayer" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateWebNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "PublicWebLayer", "CIDR" ]},
        "PortRange" : { "From" : "80", "To" : "80" }
      }
    },

    "InboundHTTPSPrivateWebNetworkAclEntryFromPublicWebLayer" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateWebNetworkAcl" },
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "PublicWebLayer", "CIDR" ]},
        "PortRange" : { "From" : "443", "To" : "443" }
      }
    },

	"InboundHTTPPrivateWebNetworkAclEntryFromAppLayer" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateWebNetworkAcl" },
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "AppLayer", "CIDR" ]},
        "PortRange" : { "From" : "80", "To" : "80" }
      }
    },

    "InboundHTTPSPrivateWebNetworkAclEntryFromAppLayer" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateWebNetworkAcl" },
        "RuleNumber" : "103",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "AppLayer", "CIDR" ]},
        "PortRange" : { "From" : "443", "To" : "443" }
      }
    },

	"InboundHTTPPublicWebNetworkAclEntryFromInternet" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "80", "To" : "80" }
      }
    },

    "InboundHTTPSPublicWebNetworkAclEntryFromInternet" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "443", "To" : "443" }
      }
    },

	"InboundEphemeralPublicWebNetworkAclEntryFromInternet" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "103",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "1024", "To" : "65535" }
      }
    },

	"InboundEphemeralPrivateWebNetworkAclEntryFromInternet" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateWebNetworkAcl" },
        "RuleNumber" : "106",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "1024", "To" : "65535" }
      }
    },

	"InboundEphemeralAppNetworkAclEntryFromInternet" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "AppNetworkAcl" },
        "RuleNumber" : "106",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "1024", "To" : "65535" }
      }
    },

	"InboundEphemeralDbNetworkAclEntryFromInternet" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "DbNetworkAcl" },
        "RuleNumber" : "106",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "1024", "To" : "65535" }
      }
    },

	"OutboundPublicWebNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "104",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

	"OutboundPrivateWebNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateWebNetworkAcl" },
        "RuleNumber" : "106",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

	"OutboundAppNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "AppNetworkAcl" },
        "RuleNumber" : "106",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

	"OutboundDbNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "DbNetworkAcl" },
        "RuleNumber" : "106",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

	"OutboundPrivateWebNetworkAclEntryToAppLayer" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateWebNetworkAcl" },
        "RuleNumber" : "104",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "AppLayer", "CIDR" ]},
        "PortRange" : { "From" : "5672", "To" : "5672" }
      }
    },

	"OutboundPublicWebNetworkAclEntryToAppLayer" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "105",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "AppLayer", "CIDR" ]},
        "PortRange" : { "From" : "5672", "To" : "5672" }
      }
    },

	"OutboundAppNetworkAclEntryToDbLayer" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "AppNetworkAcl" },
        "RuleNumber" : "105",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "DbLayer", "CIDR" ]},
        "PortRange" : { "From" : "1433", "To" : "1433" }
      }
    },

	"DbSubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "DbSubnet" },
        "NetworkAclId" : { "Ref" : "DbNetworkAcl" }
      }
    },

	"AppSubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "AppSubnet" },
        "NetworkAclId" : { "Ref" : "AppNetworkAcl" }
      }
    },

	"PrivateWebSubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateWebSubnet" },
        "NetworkAclId" : { "Ref" : "PrivateWebNetworkAcl" }
      }
    },

	"PublicWebSubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicWebSubnet" },
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
      }
    },

	"RdpInboundSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable RDP access to the EC2 host",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [ { 
          "IpProtocol" : "tcp",
          "FromPort" : "3389",  
          "ToPort" : "3389",
          "CidrIp" : { "Ref" : "RdpLocation" }
        } ]
      }
    },	

	"PublicWebInstanceIamProfile" : {
	   "Type": "AWS::IAM::InstanceProfile",
	   "Properties": {
		  "Path": "/",
		  "Roles": [ "PublicWebCluster" ]
	   }
	},

	"PrivateWebInstanceIamProfile" : {
	   "Type": "AWS::IAM::InstanceProfile",
	   "Properties": {
		  "Path": "/",
		  "Roles": [ "PrivateWebCluster" ]
	   }
	},

	"AppInstanceIamProfile" : {
	   "Type": "AWS::IAM::InstanceProfile",
	   "Properties": {
		  "Path": "/",
		  "Roles": [ "AppCluster" ]
	   }
	},

	"DbInstanceIamProfile" : {
	   "Type": "AWS::IAM::InstanceProfile",
	   "Properties": {
		  "Path": "/",
		  "Roles": [ "DbCluster" ]
	   }
	},
	
    "PublicWebServer": {
      "Type" : "AWS::EC2::Instance",
	  "DependsOn" : "GatewayToInternet",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : { },
			"packages" : {
            }         
          }
        }
      },
      
      "Properties": {
        "InstanceType" : { "Ref" : "PublicWebInstanceType" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegion2AMI", { "Ref" : "AWS::Region" }, "Windows2016Full" ]},
        "KeyName" : { "Ref" : "KeyName" },
		"IamInstanceProfile" : {"Ref" : "PublicWebInstanceIamProfile"},
		"Tags" : [{"Key" : "WillsDemo-Role", "Value" : "PublicWebServer"}],
		"NetworkInterfaces": [ {
		  "AssociatePublicIpAddress": "true",
		  "DeviceIndex": "0",
		  "GroupSet": [{ "Ref" : "RdpInboundSecurityGroup" }],
		  "SubnetId": { "Ref" : "PublicWebSubnet" }
		} ],
       "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "<script>\n",
				"powershell.exe Set-ExecutionPolicy RemoteSigned -Force \n",
				"cfn-init.exe -v -s ", {"Ref" : "AWS::StackId"}, " -r PublicWebServer --region ", {"Ref" : "AWS::Region"}, "\n",
				"powershell.exe -Command \"Import-Module AWSPowerShell; $iam=(Invoke-WebRequest http://169.254.169.254/latest/meta-data/iam/security-credentials).Content; $iamProfileInfo=ConvertFrom-Json (Invoke-WebRequest http://169.254.169.254/latest/meta-data/iam/security-credentials/$iam).Content; Set-AWSCredentials -AccessKey $iamProfileInfo.AccessKeyId -SecretKey $iamProfileInfo.SecretAccessKey -SessionToken $iamProfileInfo.Token; New-Item –Path 'c:\\temp' –ItemType 'directory' -Force; Read-S3Object -BucketName aws-codedeploy-us-east-1 -Key latest/codedeploy-agent.msi -File 'c:\\temp\\codedeploy-agent.msi'; c:\\temp\\codedeploy-agent.msi /quiet /l c:\\temp\\host-agent-install-log.txt\" \n",
				"cfn-signal.exe -e %ERRORLEVEL% ", { "Fn::Base64" : { "Ref" : "PublicWebServerWaitHandle" }}, "\n",							
			"</script>\n"
        ]]}}
      }
    },

	"PublicWebServerWaitHandle" : {
        "Type" : "AWS::CloudFormation::WaitConditionHandle",
        "Properties" : {
        }
    },

    "PublicWebServerWaitCondition" : {
        "Type" : "AWS::CloudFormation::WaitCondition",
        "DependsOn" : "DbServer",
        "Properties" : {
            "Handle" : { "Ref" : "PublicWebServerWaitHandle" },
            "Timeout" : "600"
        }
    },

	"PrivateWebServer": {
      "Type" : "AWS::EC2::Instance",
	  "DependsOn" : "GatewayToInternet",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : { },
			"packages" : {
            }         
          }
        }
      },
      
      "Properties": {
        "InstanceType" : { "Ref" : "PrivateWebInstanceType" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegion2AMI", { "Ref" : "AWS::Region" }, "Windows2016Full" ]},
        "KeyName" : { "Ref" : "KeyName" },
		"IamInstanceProfile" : {"Ref" : "PrivateWebInstanceIamProfile"},
		"Tags" : [{"Key" : "WillsDemo-Role", "Value" : "PrivateWebServer"}],
		"NetworkInterfaces": [ {
		  "AssociatePublicIpAddress": "true",
		  "DeviceIndex": "0",
		  "GroupSet": [{ "Ref" : "RdpInboundSecurityGroup" }],
		  "SubnetId": { "Ref" : "PrivateWebSubnet" }
		} ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "<script>\n",
				"powershell.exe Set-ExecutionPolicy RemoteSigned -Force \n",
				"cfn-init.exe -v -s ", {"Ref" : "AWS::StackId"}, " -r PrivateWebServer --region ", {"Ref" : "AWS::Region"}, "\n",
				"powershell.exe -Command \"Import-Module AWSPowerShell; $iam=(Invoke-WebRequest http://169.254.169.254/latest/meta-data/iam/security-credentials).Content; $iamProfileInfo=ConvertFrom-Json (Invoke-WebRequest http://169.254.169.254/latest/meta-data/iam/security-credentials/$iam).Content; Set-AWSCredentials -AccessKey $iamProfileInfo.AccessKeyId -SecretKey $iamProfileInfo.SecretAccessKey -SessionToken $iamProfileInfo.Token; New-Item –Path 'c:\\temp' –ItemType 'directory' -Force; Read-S3Object -BucketName aws-codedeploy-us-east-1 -Key latest/codedeploy-agent.msi -File 'c:\\temp\\codedeploy-agent.msi'; c:\\temp\\codedeploy-agent.msi /quiet /l c:\\temp\\host-agent-install-log.txt\" \n",
				"cfn-signal.exe -e %ERRORLEVEL% ", { "Fn::Base64" : { "Ref" : "PrivateWebServerWaitHandle" }}, "\n",			
			"</script>\n"
        ]]}}
      }
    },

	"PrivateWebServerWaitHandle" : {
        "Type" : "AWS::CloudFormation::WaitConditionHandle",
        "Properties" : {
        }
    },

    "PrivateWebServerWaitCondition" : {
        "Type" : "AWS::CloudFormation::WaitCondition",
        "DependsOn" : "DbServer",
        "Properties" : {
            "Handle" : { "Ref" : "PrivateWebServerWaitHandle" },
            "Timeout" : "600"
        }
    },

	"AppServer": {
      "Type" : "AWS::EC2::Instance",
	  "DependsOn" : "GatewayToInternet",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : { },
			"packages" : {
            }         
          }
        }
      },
      
      "Properties": {
        "InstanceType" : { "Ref" : "AppInstanceType" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegion2AMI", { "Ref" : "AWS::Region" }, "Windows2016Full" ]},
        "KeyName" : { "Ref" : "KeyName" },
		"IamInstanceProfile" : {"Ref" : "AppInstanceIamProfile"},
		"Tags" : [{"Key" : "WillsDemo-Role", "Value" : "AppServer"}],
		"NetworkInterfaces": [ {
		  "AssociatePublicIpAddress": "true",
		  "DeviceIndex": "0",
		  "GroupSet": [{ "Ref" : "RdpInboundSecurityGroup" }],
		  "SubnetId": { "Ref" : "AppSubnet" }
		} ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "<script>\n",
				"powershell.exe Set-ExecutionPolicy RemoteSigned -Force \n",
				"cfn-init.exe -v -s ", {"Ref" : "AWS::StackId"}, " -r AppServer --region ", {"Ref" : "AWS::Region"}, "\n",
				"powershell.exe -Command \"Import-Module AWSPowerShell; $iam=(Invoke-WebRequest http://169.254.169.254/latest/meta-data/iam/security-credentials).Content; $iamProfileInfo=ConvertFrom-Json (Invoke-WebRequest http://169.254.169.254/latest/meta-data/iam/security-credentials/$iam).Content; Set-AWSCredentials -AccessKey $iamProfileInfo.AccessKeyId -SecretKey $iamProfileInfo.SecretAccessKey -SessionToken $iamProfileInfo.Token; New-Item –Path 'c:\\temp' –ItemType 'directory' -Force; Read-S3Object -BucketName aws-codedeploy-us-east-1 -Key latest/codedeploy-agent.msi -File 'c:\\temp\\codedeploy-agent.msi'; c:\\temp\\codedeploy-agent.msi /quiet /l c:\\temp\\host-agent-install-log.txt\" \n",
				"cfn-signal.exe -e %ERRORLEVEL% ", { "Fn::Base64" : { "Ref" : "AppServerWaitHandle" }}, "\n",				
			"</script>\n"
        ]]}}
      }
    },

	"AppServerWaitHandle" : {
        "Type" : "AWS::CloudFormation::WaitConditionHandle",
        "Properties" : {
        }
    },

    "AppServerWaitCondition" : {
        "Type" : "AWS::CloudFormation::WaitCondition",
        "DependsOn" : "DbServer",
        "Properties" : {
            "Handle" : { "Ref" : "AppServerWaitHandle" },
            "Timeout" : "600"
        }
    },

	"DbServer": {
      "Type" : "AWS::EC2::Instance",
	  "DependsOn" : "GatewayToInternet",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : { },
			"packages" : {
            }         
          }
        }
      },
      
      "Properties": {
        "InstanceType" : { "Ref" : "DbInstanceType" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegion2AMI", { "Ref" : "AWS::Region" }, "2016withSqlExpress" ]},
        "KeyName" : { "Ref" : "KeyName" },
		"IamInstanceProfile" : "WillsDbCluster",
		"Tags" : [{"Key" : "WillsDemo-Role", "Value" : "DbServer"}],
		"NetworkInterfaces": [ {
		  "AssociatePublicIpAddress": "true",
		  "DeviceIndex": "0",
		  "GroupSet": [{ "Ref" : "RdpInboundSecurityGroup" }],
		  "SubnetId": { "Ref" : "DbSubnet" }
		} ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "<script>\n",
				"powershell.exe Set-ExecutionPolicy RemoteSigned -Force \n",
				"cfn-init.exe -v -s ", {"Ref" : "AWS::StackId"}, " -r DbServer --region ", {"Ref" : "AWS::Region"}, "\n",
				"powershell.exe -Command \"Import-Module AWSPowerShell; $iam=(Invoke-WebRequest http://169.254.169.254/latest/meta-data/iam/security-credentials).Content; $iamProfileInfo=ConvertFrom-Json (Invoke-WebRequest http://169.254.169.254/latest/meta-data/iam/security-credentials/$iam).Content; Set-AWSCredentials -AccessKey $iamProfileInfo.AccessKeyId -SecretKey $iamProfileInfo.SecretAccessKey -SessionToken $iamProfileInfo.Token; New-Item –Path 'c:\\temp' –ItemType 'directory' -Force; Read-S3Object -BucketName aws-codedeploy-us-east-1 -Key latest/codedeploy-agent.msi -File 'c:\\temp\\codedeploy-agent.msi'; c:\\temp\\codedeploy-agent.msi /quiet /l c:\\temp\\host-agent-install-log.txt\" \n",
				"cfn-signal.exe -e %ERRORLEVEL% ", { "Fn::Base64" : { "Ref" : "DbServerWaitHandle" }}, "\n",		
			"</script>\n"
        ]]}}
      }
    },

	"DbServerWaitHandle" : {
        "Type" : "AWS::CloudFormation::WaitConditionHandle",
        "Properties" : {
        }
    },

    "DbServerWaitCondition" : {
        "Type" : "AWS::CloudFormation::WaitCondition",
        "DependsOn" : "DbServer",
        "Properties" : {
            "Handle" : { "Ref" : "DbServerWaitHandle" },
            "Timeout" : "600"
        }
    }
  },
  
   "Outputs" : {
    "VPCId" : {
      "Description" : "VPCId of the newly created VPC",
      "Value" :  { "Ref" : "VPC" }
    },
    "PublicWebSubnet" : {
      "Description" : "SubnetId of the public web subnet",
      "Value" :  { "Ref" : "PublicWebSubnet" }
    },
	"PrivateWebSubnet" : {
      "Description" : "SubnetId of the public web subnet",
      "Value" :  { "Ref" : "PrivateWebSubnet" }
    },
	"AppSubnet" : {
      "Description" : "SubnetId of the app subnet",
      "Value" :  { "Ref" : "AppSubnet" }
    },
	"DbSubnet" : {
      "Description" : "SubnetId of the DB subnet",
      "Value" :  { "Ref" : "DbSubnet" }
    },
    "PublicWebServerDnsName" : {
      "Description" : "DNS Name of the EC2 host",
      "Value" :  { "Fn::GetAtt" : ["PublicWebServer", "PublicDnsName"] }
    },
	"PrivateWebServerDnsName" : {
      "Description" : "DNS Name of the EC2 host",
      "Value" :  { "Fn::GetAtt" : ["PrivateWebServer", "PublicDnsName"] }
    },
	"AppServerDnsName" : {
      "Description" : "DNS Name of the EC2 host",
      "Value" :  { "Fn::GetAtt" : ["AppServer", "PublicDnsName"] }
    },
	"DbServerDnsName" : {
      "Description" : "DNS Name of the EC2 host",
      "Value" :  { "Fn::GetAtt" : ["DbServer", "PublicDnsName"] }
    }
  }
}
